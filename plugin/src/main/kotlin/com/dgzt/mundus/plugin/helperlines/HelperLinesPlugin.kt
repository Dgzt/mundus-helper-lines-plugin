/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.dgzt.mundus.plugin.helperlines

import com.badlogic.gdx.graphics.g3d.RenderableProvider
import com.badlogic.gdx.utils.Array
import com.mbrlabs.mundus.commons.scene3d.components.TerrainComponent
import com.mbrlabs.mundus.pluginapi.EventExtension
import com.mbrlabs.mundus.pluginapi.MenuExtension
import com.mbrlabs.mundus.pluginapi.PluginEventManager
import com.mbrlabs.mundus.pluginapi.RenderExtension
import com.mbrlabs.mundus.pluginapi.SceneExtension
import com.mbrlabs.mundus.pluginapi.ui.RootWidget
import com.mbrlabs.mundus.pluginapi.ui.Widget
import org.pf4j.Extension
import org.pf4j.Plugin

class HelperLinesPlugin : Plugin() {

    companion object {
        const val RECTANGLE_RADIO_BUTTON_TEXT = "Rectangle"
        const val HEXAGON_RADIO_BUTTON_TEXT = "Hexagon"
    }

    @Extension
    class HelperLinesMenuExtension : MenuExtension {
        override fun getMenuName(): String = "Helper lines"
        override fun setupDialogRootWidget(root: RootWidget) {
            root.addCheckbox("Enabled") {
                PropertyManager.enabled = it
                if (PropertyManager.enabled) {
                    HelperLinesManager.createHelperLines()
                } else {
                    HelperLinesManager.clearHelperLines()
                }
            }.setAlign(Widget.WidgetAlign.LEFT)
            root.addRow()
            root.addRadioButtons(RECTANGLE_RADIO_BUTTON_TEXT, HEXAGON_RADIO_BUTTON_TEXT) {
                when (it) {
                    RECTANGLE_RADIO_BUTTON_TEXT -> PropertyManager.type = HelperLinesType.RECTANGLE
                    HEXAGON_RADIO_BUTTON_TEXT -> PropertyManager.type = HelperLinesType.HEXAGON
                }
            }.setAlign(Widget.WidgetAlign.LEFT)
            root.addRow()
            root.addSpinner("Column", 2, 100, PropertyManager.DEFAULT_COLUMN) { PropertyManager.column = it }.setAlign(Widget.WidgetAlign.LEFT)
            root.addRow()
            root.addSpinner("Counter offset X", Int.MIN_VALUE, Int.MAX_VALUE, PropertyManager.DEFAULT_COUNTER_OFFSET_X) { PropertyManager.counterOffsetX = it }.setAlign(Widget.WidgetAlign.LEFT)
            root.addRow()
            root.addSpinner("Counter offset Y", Int.MIN_VALUE, Int.MAX_VALUE, PropertyManager.DEFAULT_COUNTER_OFFSET_Y) { PropertyManager.counterOffsetY = it }.setAlign(Widget.WidgetAlign.LEFT)
        }

    }

    @Extension
    class HelperLinesEventExtension : EventExtension {

        override fun manageEvents(pluginEventManager: PluginEventManager) {
            pluginEventManager.registerEventListener(TerrainVerticesChangedEventListener())
        }

    }

    @Extension
    class HelperLinesSceneExtension : SceneExtension {
        override fun sceneLoaded(terrains: Array<TerrainComponent>) {
            PropertyManager.terrains.addAll(terrains)
        }

    }

    @Extension
    class HelperLinesRenderExtension : RenderExtension {

        private val renderableProvider: RenderableProvider

        init {
            renderableProvider = RenderableProvider { renderables, pool -> HelperLinesManager.helperLineShapes.forEach { it.modelInstance.getRenderables(renderables, pool) } }
        }

        override fun getRenderableProvider(): RenderableProvider = renderableProvider
    }
}
